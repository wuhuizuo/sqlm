// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wuhuizuo/sqlm (interfaces: RowFilter)

// Package sqlm is a generated GoMock package.
package sqlm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRowFilter is a mock of RowFilter interface.
type MockRowFilter struct {
	ctrl     *gomock.Controller
	recorder *MockRowFilterMockRecorder
}

// MockRowFilterMockRecorder is the mock recorder for MockRowFilter.
type MockRowFilterMockRecorder struct {
	mock *MockRowFilter
}

// NewMockRowFilter creates a new mock instance.
func NewMockRowFilter(ctrl *gomock.Controller) *MockRowFilter {
	mock := &MockRowFilter{ctrl: ctrl}
	mock.recorder = &MockRowFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowFilter) EXPECT() *MockRowFilterMockRecorder {
	return m.recorder
}

// WherePattern mocks base method.
func (m *MockRowFilter) WherePattern() (*SQLWhere, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WherePattern")
	ret0, _ := ret[0].(*SQLWhere)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WherePattern indicates an expected call of WherePattern.
func (mr *MockRowFilterMockRecorder) WherePattern() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WherePattern", reflect.TypeOf((*MockRowFilter)(nil).WherePattern))
}
