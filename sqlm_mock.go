// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wuhuizuo/sqlm (interfaces: TableAble)

package sqlm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockTableAble is a mock of TableAble interface.
type MockTableAble struct {
	ctrl     *gomock.Controller
	recorder *MockTableAbleMockRecorder
}

// MockTableAbleMockRecorder is the mock recorder for MockTableAble.
type MockTableAbleMockRecorder struct {
	mock *MockTableAble
}

// NewMockTableAble creates a new mock instance.
func NewMockTableAble(ctrl *gomock.Controller) *MockTableAble {
	mock := &MockTableAble{ctrl: ctrl}
	mock.recorder = &MockTableAbleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableAble) EXPECT() *MockTableAbleMockRecorder {
	return m.recorder
}

// Con mocks base method.
func (m *MockTableAble) Con() (*sqlx.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Con")
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Con indicates an expected call of Con.
func (mr *MockTableAbleMockRecorder) Con() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Con", reflect.TypeOf((*MockTableAble)(nil).Con))
}

// Create mocks base method.
func (m *MockTableAble) Create() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTableAbleMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTableAble)(nil).Create))
}

// Delete mocks base method.
func (m *MockTableAble) Delete(arg0 RowFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTableAbleMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTableAble)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockTableAble) Get(arg0 RowFilter, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTableAbleMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTableAble)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockTableAble) Insert(arg0 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTableAbleMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTableAble)(nil).Insert), arg0)
}

// Inserts mocks base method.
func (m *MockTableAble) Inserts(arg0 []interface{}) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inserts", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inserts indicates an expected call of Inserts.
func (mr *MockTableAbleMockRecorder) Inserts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inserts", reflect.TypeOf((*MockTableAble)(nil).Inserts), arg0)
}

// IsDup mocks base method.
func (m *MockTableAble) IsDup(arg0 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDup", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDup indicates an expected call of IsDup.
func (mr *MockTableAbleMockRecorder) IsDup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDup", reflect.TypeOf((*MockTableAble)(nil).IsDup), arg0)
}

// List mocks base method.
func (m *MockTableAble) List(arg0 RowFilter, arg1 ListOptions) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTableAbleMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTableAble)(nil).List), arg0, arg1)
}

// RowModel mocks base method.
func (m *MockTableAble) RowModel() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowModel")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// RowModel indicates an expected call of RowModel.
func (mr *MockTableAbleMockRecorder) RowModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowModel", reflect.TypeOf((*MockTableAble)(nil).RowModel))
}

// Save mocks base method.
func (m *MockTableAble) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTableAbleMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTableAble)(nil).Save), arg0)
}

// SetRowModel mocks base method.
func (m *MockTableAble) SetRowModel(arg0 func() interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRowModel", arg0)
}

// SetRowModel indicates an expected call of SetRowModel.
func (mr *MockTableAbleMockRecorder) SetRowModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRowModel", reflect.TypeOf((*MockTableAble)(nil).SetRowModel), arg0)
}

// Update mocks base method.
func (m *MockTableAble) Update(arg0 RowFilter, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTableAbleMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTableAble)(nil).Update), arg0, arg1)
}
